// Code generated by goctl. DO NOT EDIT.
// Source: myRedis.proto

package shoppingcartservice

import (
	"context"

	"server-v1/service/redis/pb/redisService"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddItemRequest     = redisService.AddItemRequest
	IdRequest          = redisService.IdRequest
	ItemsResponse      = redisService.ItemsResponse
	RemoveItemRequest  = redisService.RemoveItemRequest
	RemoveItemsRequest = redisService.RemoveItemsRequest
	ResultResponse     = redisService.ResultResponse

	ShoppingCartService interface {
		GetItems(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ItemsResponse, error)
		AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*ResultResponse, error)
		UpdateItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*ResultResponse, error)
		RemoveItem(ctx context.Context, in *RemoveItemRequest, opts ...grpc.CallOption) (*ResultResponse, error)
		RemoveItems(ctx context.Context, in *RemoveItemsRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	}

	defaultShoppingCartService struct {
		cli zrpc.Client
	}
)

func NewShoppingCartService(cli zrpc.Client) ShoppingCartService {
	return &defaultShoppingCartService{
		cli: cli,
	}
}

func (m *defaultShoppingCartService) GetItems(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ItemsResponse, error) {
	client := redisService.NewShoppingCartServiceClient(m.cli.Conn())
	return client.GetItems(ctx, in, opts...)
}

func (m *defaultShoppingCartService) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	client := redisService.NewShoppingCartServiceClient(m.cli.Conn())
	return client.AddItem(ctx, in, opts...)
}

func (m *defaultShoppingCartService) UpdateItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	client := redisService.NewShoppingCartServiceClient(m.cli.Conn())
	return client.UpdateItem(ctx, in, opts...)
}

func (m *defaultShoppingCartService) RemoveItem(ctx context.Context, in *RemoveItemRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	client := redisService.NewShoppingCartServiceClient(m.cli.Conn())
	return client.RemoveItem(ctx, in, opts...)
}

func (m *defaultShoppingCartService) RemoveItems(ctx context.Context, in *RemoveItemsRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	client := redisService.NewShoppingCartServiceClient(m.cli.Conn())
	return client.RemoveItems(ctx, in, opts...)
}
